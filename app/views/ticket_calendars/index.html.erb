<h2>Ticket Calendar</h2>
<select id="view-selector">
  <option value="multiMonthYear">Multi Month Year</option>
  <option value="timeGridWeek">Time Grid Week</option>
  <option value="listDay">List Day</option>
  <option value="listWeek">List Week</option>
  <option value="listMonth">List Month</option>
  <option value="listYear">List Year</option>
  <option value="dayGridMonth">Day Grid Month</option>
  <option value="dayGridWeek">Day Grid Week</option>
  <option value="dayGridDay">Day Grid Day</option>
</select>
<!-- モーダルダイアログのHTML -->
<div id="ticketModal" class="modal" style="display:none;">
  <div class="modal-content">
    <span class="close">&times;</span>
    <iframe id="ticketIframe" src="" frameborder="0" style="width: 100%; height: 80vh;"></iframe>
  </div>
</div>
<!-- コンテキストメニューのHTML構造 -->
<div id="contextMenu" class="context-menu" style="display: none; position: absolute; z-index: 1000;">
  <ul class="menu-list">
    <li><a href="#" id="edit-ticket">編集</a></li>
    <li><a href="#" id="edit-status">Close</a></li>
    <li id="progress-menu-item">
      <select id="view-selector">
        <option value="multiMonthYear">Multi Month Year</option>
        <option value="timeGridWeek">Time Grid Week</option>
        <option value="listDay">List Day</option>
        <option value="listWeek">List Week</option>
        <option value="listMonth">List Month</option>
        <option value="listYear">List Year</option>
        <option value="dayGridMonth">Day Grid Month</option>
        <option value="dayGridWeek">Day Grid Week</option>
        <option value="dayGridDay">Day Grid Day</option>
      </select>
    </li>
    <li><a href="#" id="priority">優先度</a></li>
    <li><a href="#" id="category">カテゴリ</a></li>
  </ul>
</div>
<div id='calendar'></div>
<style>
  /* 土曜日の色を青に設定 */
  .fc-day-sat {
      background-color: #CCF;
  }

  /* 日曜日の色を赤に設定 */
  .fc-day-sun {
      background-color: #FCC;
  }
  /* カレンダーセルにホバーした際にカーソルをカスタムカーソルに変更 */
  .fc-daygrid-day:hover {
      cursor: alias;
  }
  /* コンテキストメニューのスタイル */
  .context-menu {
    background-color: white;
    border: 1px solid #ccc;
    padding: 10px;
  }
  .menu-list {
    list-style: none;
    margin: 0;
    padding: 0;
  }
  .menu-list li a {
    display: block;
    padding: 5px 10px;
    text-decoration: none;
    color: black;
  }
  .menu-list li a:hover {
    background-color: #f0f0f0;
  }
  /* モーダルダイアログのCSS */
  .modal {
    position: fixed;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0,0,0,0.4);
    z-index: 1001;
  }

  .modal-content {
    background-color: #fefefe;
    margin: 0 auto;
    padding: 0;
    border: 1px solid #888;
    width: 80%;
  }

  .close {
    color: #aaa;
    float: right;
    font-size: 28px;
    font-weight: bold;
  }

  .close:hover,
  .close:focus {
    color: black;
    text-decoration: none;
    cursor: pointer;
  }
</style>
<%= javascript_include_tag 'index.global.min.js', plugin: :ticket_calendar %>
<script type="importmap">
  {
    "imports": {
      "timeGrid": "<%= asset_path('/plugin_assets/ticket_calendar/javascripts/packages/timegrid/index.global.min.js') %>",
      "list": "<%= asset_path('/plugin_assets/ticket_calendar/javascripts/packages/list/index.global.min.js') %>",
      "dayGrid": "<%= asset_path('/plugin_assets/ticket_calendar/javascripts/packages/daygrid/index.global.min.js') %>",
      "multiMonth": "<%= asset_path('/plugin_assets/ticket_calendar/javascripts/packages/multimonth/index.global.min.js') %>"
    }
  }
</script>
<script>
  document.addEventListener('DOMContentLoaded', function() {
    var project_id = "<%= @project.id %>";
    var calendarEl = document.getElementById('calendar');
    var calendar = new FullCalendar.Calendar(calendarEl, {
      initialView: 'multiMonthYear',
      timeZone: 'local',
      firstDay: 1,
      events: function(fetchInfo, successCallback, failureCallback) {
        fetch(`/projects/${project_id}/ticket_calendars?start=${fetchInfo.start.toLocaleDateString()}&end=${fetchInfo.end.toLocaleDateString()}`, {
          headers: {
            'Accept': 'application/json'
          }
        })
          .then(response => response.json())
          .then(events => successCallback(events))
          .catch(error => failureCallback(error));
      },
      editable: true,  // カレンダー上でイベントの編集を許可
      eventDrop: function(info) {
        updateTicketDatesHandler(project_id, info);
      },
      eventResizableFromStart: true,  // イベントの開始日もリサイズ可能に
      eventResize: function(info) {
        updateTicketDatesHandler(project_id, info);
      },
      eventClick: function(info) {
       info.jsEvent.preventDefault(); // デフォルトのイベント動作を防ぐ
      //  openEditTicketModal(project_id, info); // モーダルを開く関数を呼び出す
       openContextMenu(project_id, info, this);
      },
      dateClick: function(info) {
        openNewTicketModal(project_id, info, this); // モーダルを開く関数を呼び出す
      }
    });
    calendar.render();
    var viewSelector = document.getElementById('view-selector');
    viewSelector.addEventListener('change', function() {
      calendar.changeView(this.value);
    });
  });

  function openContextMenu(project_id, info, calendar) {
    var ticket_id = info.event.id;
    info.jsEvent.preventDefault(); // ブラウザのデフォルトのイベントを停止
    info.jsEvent.stopPropagation(); // イベントのバブリングを停止
    // コンテキストメニューを表示
    var contextMenu = document.getElementById('contextMenu');
    contextMenu.style.display = 'block';
    contextMenu.style.left = info.jsEvent.pageX + 'px';
    contextMenu.style.top = info.jsEvent.pageY + 'px';
    // 編集
    document.getElementById('edit-ticket').addEventListener('click', function(event) {
      document.getElementById('contextMenu').style.display = 'none';
      openEditTicketModal(project_id, info, calendar);
    });
    // 進捗率
    document.getElementById('progress-menu-item').addEventListener('click', function(event) {
      event.preventDefault();
    });
    // 閉じる
    document.addEventListener('click', function(event) {
      if (!event.target.closest('#contextMenu')) {
        document.getElementById('contextMenu').style.display = 'none';
      }
    });
  }

  function openNewTicketModal(project_id, info, calendar) {
    console.log(calendar)
    var url  = '/issues/new?issue[start_date]=' + info.dateStr;  // 日付をstart_dateパラメータにセット
    openTicketModal(project_id, info, url, calendar);
  }

  function openEditTicketModal(project_id, info, calendar) {
    var ticket_id = info.event.id;
    var url =`/issues/${ticket_id}/edit`; // iframeにチケット編集ページのURLを設定
    openTicketModal(project_id, info, url, calendar);
  }

  function openTicketModal(project_id, info, url, calendar) {
    var modal = document.getElementById('ticketModal');
    var iframe = document.getElementById('ticketIframe');
    var closeBtn = document.querySelector('.close');

    iframe.src = url;
    modal.style.display = 'block'; // モーダルを表示

   // iframe内のメニュー部分を非表示にする
    iframe.onload = function() {
      const iframeDocument = iframe.contentDocument || iframe.contentWindow.document;
      const menu = iframeDocument.getElementById('top-menu'); // メニューのID
      if (menu) {
        menu.style.display = 'none';
      }
      const header = iframeDocument.getElementById('header'); // メニューのID
      if (header) {
        header.style.display = 'none';
      }
      const footer = iframeDocument.getElementById('footer'); // メニューのID
      if (footer) {
        footer.style.display = 'none';
      }
    };

    // クローズボタンのイベントリスナー
    closeBtn.onclick = function() {
      modal.style.display = 'none';
      calendar.refetchEvents();
    };

    // モーダル外をクリックした場合にモーダルを閉じる
    window.onclick = function(event) {
      if (event.target == modal) {
        modal.style.display = 'none';
        calendar.refetchEvents();
      }
    };
  }

  function updateTicketDatesHandler(project_id, info) {
      var ticket_id = info.event.id;
      var newStartDate = info.event.start;
      var newEndDate = info.event.end ? info.event.end : newStartDate; // 終日イベントの場合、終了日は省略されることがある

      updateTicketDates(project_id, ticket_id, newStartDate, newEndDate);
  }

  function addDay(date, days) {
    return new Date(date.getTime() + (1000 * 60 * 60 * 24) * days);
  }

  function updateTicketDates(project_id, ticket_id, start_date, end_date) {
    fetch(`/projects/${project_id}/ticket_calendars/${ticket_id}/update_dates`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
      },
      body: JSON.stringify({ start_date: start_date.toLocaleDateString(), end_date: end_date.toLocaleDateString()  })
    }).then(response => {
      if (!response.ok) {
        alert('Failed to update ticket dates.');
      }
    });
  }

  function updateTicketProgress(project_id, ticket_id, progress) {
    fetch(`/projects/${project_id}/ticket_calendars/${ticket_id}/update_done_ratio`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
      },
      body: JSON.stringify({ done_ratio: progress })
    }).then(response => {
      if (!response.ok) {
        alert('Failed to update ticket done ratio.');
      }
    });
  }
</script>
